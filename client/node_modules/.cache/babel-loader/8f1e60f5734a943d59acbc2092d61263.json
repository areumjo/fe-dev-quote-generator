{"ast":null,"code":"\"use strict\";\n\nconst axios = require(\"axios\");\n\nconst API_URL = \"https://quote-garden.herokuapp.com/\";\nconst API_VERSION = \"api/v2/\";\n\nexports.randomQuote = () => {\n  return new Promise((success, reject) => {\n    axios.get(`${API_URL}${API_VERSION}quotes/random`).then(({\n      data\n    }) => {\n      success(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\nexports.authorQuotes = (authorName, page = 1, limit = 10) => {\n  return new Promise((success, reject) => {\n    if (authorName === undefined) {\n      reject({\n        error: \"Author is required\"\n      });\n    }\n\n    axios.get(`${API_URL}${API_VERSION}authors/${authorName}?page=${page}&limit=${limit}`).then(({\n      data\n    }) => {\n      success(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\nexports.genreQuotes = (genre, page = 1, limit = 10) => {\n  return new Promise((success, reject) => {\n    if (genre === undefined) {\n      reject({\n        error: \"Genre is required\"\n      });\n    }\n\n    axios.get(`${API_URL}${API_VERSION}genre/${genre}?page=${page}&limit=${limit}`).then(({\n      data\n    }) => {\n      success(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\nexports.getQuotes = (page = 1, limit = 10) => {\n  return new Promise((success, reject) => {\n    axios.get(`${API_URL}${API_VERSION}quotes?page=${page}&limit=${limit}`).then(({\n      data\n    }) => {\n      success(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\n\nexports.searchQuotes = (searchKeyword, page = 1, limit = 10) => {\n  return new Promise((success, reject) => {\n    if (searchKeyword === undefined) {\n      reject({\n        error: \"Search keyword required\"\n      });\n    }\n\n    axios.get(`${API_URL}${API_VERSION}quotes/${searchKeyword}?page=${page}&limit=${limit}`).then(({\n      data\n    }) => {\n      success(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/areumjo/Documents/devChallenges/client/node_modules/quotegarden/lib/quotes.js"],"names":["axios","require","API_URL","API_VERSION","exports","randomQuote","Promise","success","reject","get","then","data","catch","error","authorQuotes","authorName","page","limit","undefined","genreQuotes","genre","getQuotes","searchQuotes","searchKeyword"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nconst axios = require(\"axios\");\r\n\r\nconst API_URL = \"https://quote-garden.herokuapp.com/\";\r\nconst API_VERSION = \"api/v2/\";\r\n\r\nexports.randomQuote = () => {\r\n  return new Promise((success, reject) => {\r\n    axios\r\n      .get(`${API_URL}${API_VERSION}quotes/random`)\r\n      .then(({ data }) => {\r\n        success(data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexports.authorQuotes = (authorName, page = 1, limit = 10) => {\r\n  return new Promise((success, reject) => {\r\n    if (authorName === undefined) {\r\n      reject({ error: \"Author is required\" });\r\n    }\r\n    axios\r\n      .get(\r\n        `${API_URL}${API_VERSION}authors/${authorName}?page=${page}&limit=${limit}`\r\n      )\r\n      .then(({ data }) => {\r\n        success(data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexports.genreQuotes = (genre, page = 1, limit = 10) => {\r\n  return new Promise((success, reject) => {\r\n    if (genre === undefined) {\r\n      reject({ error: \"Genre is required\" });\r\n    }\r\n    axios\r\n      .get(`${API_URL}${API_VERSION}genre/${genre}?page=${page}&limit=${limit}`)\r\n      .then(({ data }) => {\r\n        success(data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexports.getQuotes = (page = 1, limit = 10) => {\r\n  return new Promise((success, reject) => {\r\n    axios\r\n      .get(`${API_URL}${API_VERSION}quotes?page=${page}&limit=${limit}`)\r\n      .then(({ data }) => {\r\n        success(data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\nexports.searchQuotes = (searchKeyword, page = 1, limit = 10) => {\r\n  return new Promise((success, reject) => {\r\n    if (searchKeyword === undefined) {\r\n      reject({ error: \"Search keyword required\" });\r\n    }\r\n    axios\r\n      .get(\r\n        `${API_URL}${API_VERSION}quotes/${searchKeyword}?page=${page}&limit=${limit}`\r\n      )\r\n      .then(({ data }) => {\r\n        success(data);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}